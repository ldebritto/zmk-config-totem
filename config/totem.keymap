#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// macOS layers
#define DEF 0
#define NUM 1 
#define NAV 2 // must be bellow MOU for input_processor to work
#define SYM 3
#define FUN 4
#define MOU 5 // also great for one-handed use with a mouse on the right hand

// AOE layers
#define AOE 6 // AOE 2 layers with easier access for default shortcuts on main layer
#define AGS 7
#define ABS 8

#define HYPR LG(LS(LC(LALT))) // HYPR key

// These includes allow for easier maintenance and readability between different keymaps
#include "features/totem_keypos.h"                  // Key positions naming scheme for 34 keys keymaps
#include "features/timings.h"                       // Timing definitions for hold-tap and combos

#include "features/core_behaviors_overrides.dtsi"   // Overrides for core behaviors such as &sk, &mt and &lt
#include "features/mouse.dtsi"                      // Requires layer defines above
#include "features/num_word.dtsi"                   // Settings for &num_word and required remote include

/ {
     combos {
        #include "features/combos.dtsi"              // Very same combos from Sweep
    };

    behaviors {
        #include "features/custom_behaviors.dtsi"    // Very same behaviors from Sweep
    };

    macros {
        #include "features/layer_cancel_macros.dtsi" // Layer change behaviors with and embeded cancel to absorb unused queued mods
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer_for_function_and_number_row_keys {
            if-layers = <NAV SYM>;
            then-layer = <FUN>;
        };
        
    };

    keymap {
        compatible = "zmk,keymap";
                
        DEF {
            bindings = <
        &ltl MOU Q     &kp W           &kp E         &kp R        &kp T         &kp Y        &kp U         &kp I          &kp O         &kp P
        &hrml LCTRL A  &hrml LALT S    &hrml LSHFT D &hrml LGUI F &hrml HYPR G  &hrmr HYPR H &hrmr RGUI J  &hrmr LSHFT K  &hrmr RALT L  &hrmr RCTRL SQT
&none   &hrml GLOBE Z  &kp X           &kp C         &ltl NUM V   &kp B         &kp N        &kp M         &kp COMMA      &kp DOT       &kp SEMI        &none
                                       &none         &lc NAV      &kp RSHFT     &kp SPACE    &lc SYM       &none
            >;
        };
          
        NUM {
            bindings = <
        &trans    &trans  &trans  &trans  &trans  &kp MINUS  &kp N7  &kp N8  &kp N9  &kp PLUS
        &trans    &trans  &trans  &trans  &trans  &kp DOT    &kp N4  &kp N5  &kp N6  &kp SLASH
&trans  &trans    &trans  &trans  &trans  &trans  &kp COMMA  &kp N1  &kp N2  &kp N3  &kp ASTERISK  &mt LA(BSPC) BSPC
                          &trans  &trans  &trans  &trans     &lt SYM N0  &trans
            >;
        };

        NAV {
            bindings = <
        &kp TAB         &swapper  &kp LS(LC(TAB)) &kp LC(TAB)   &kp LG(RBKT)    &kp PG_UP  &mt HOME LA(LEFT) &kp UP    &mt END LA(RIGHT) &mt LA(BSPC) BSPC
        &sk LCTRL       &sk LALT  &sk LSHFT       &sk LGUI      &kp LG(LBKT)    &kp PG_DN  &kp LEFT          &kp DOWN  &kp RIGHT         &kp RET
&trans  &mt GLOBE LG(Z) &kp LG(X) &kp LG(C)       &kp LG(V)     &kp F18         &playnp    &kp F19           &vb_dn    &vb_up            &kp DEL &trans
                                  &trans          &trans        &lt SYM SPACE   &trans     &trans            &trans
            >;
        };

        SYM {
            bindings = <
        &kp ESC         &kp AT    &kp EQUAL  &kp LBKT &kp RBKT        &kp AMPS &kp PRCNT &kp DOLLAR &kp GRAVE &kp DQT
        &kp MINUS       &kp CARET &kp TILDE  &kp LPAR &kp RPAR        &kp HASH &sk RGUI  &sk LSHFT  &sk RALT  &sk RCTRL
&trans  &mt GLOBE PLUS  &kp ASTRK &kp SLASH  &kp LBRC &kp RBRC        &kp PIPE &kp BSLH  &kp QMARK  &kp EXCL  &kp COLON &trans
                                   &trans    &trans   &mt RSHFT UNDER &lt NAV SPACE &trans    &trans 
            >;
        };

        FUN {
            bindings = <
        &kp N1     &kp N2    &kp N3     &kp N4    &kp N5        &kp N6   &kp N7    &kp N8     &kp N9    &kp N0
        &sk LCTRL  &sk LALT  &sk LSHFT  &sk LGUI  &kp F11       &kp F12  &sk RGUI  &sk LSHFT  &sk RALT  &sk RCTRL
&trans  &kp F1     &kp F2    &kp F3     &kp F4    &kp F5        &kp F6   &kp F7    &kp F8     &kp F9    &kp F10   &trans
                             &trans     &trans    &kp C_POWER   &kp CAPS &trans    &trans
            >;
        };
  
        MOU {
            bindings = <
        &ltl MOU TAB    &kp LC(UP)  &kp LS(LC(TAB)) &kp LC(TAB) &kp LG(RBKT) &msc SCRL_DOWN   &msc SCRL_RIGHT &mmv MOVE_UP    &msc SCRL_LEFT  &kp BSPC
        &kp LCTRL       &kp LALT    &kp LSHFT       &kp LGUI    &kp LG(LBKT) &msc SCRL_UP     &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT &lt NAV ENTER
&trans  &mt GLOBE UNDO  &kp LG(X)   &kp LG(C)       &kp LG(V)   &kp F11      &kp F18          &mkp MCLK       &mkp MB4        &mkp MB5        &kp DEL         &trans
                                    &trans          NAV_DEF     &kp SPACE    &mkp LCLK        &mkp RCLK       &trans
            >;          
        };

        AOE {
            bindings = <
        &kp Q        &kp W      &kp E       &kp R        &kp T        &trans  &trans  &trans  &trans  &trans
        &mt LCTRL A  &mt LALT S &mt LSHFT D &mt LCTRL F  &kp G        &trans  &trans  &trans  &trans  &trans
&none   &kp Z        &kp X      &kp C       &kp V        &kp B        &trans  &trans  &trans  &trans  &trans  &none
                                &none       &lt AGS H    &lt ABS DOT  &trans  &trans  &none
            >;
        };

        AGS {
            bindings = <
        &kp N1        &kp N2       &kp N3       &kp N4        &kp DEL    &trans     &trans  &trans  &trans  &kp BSPC
        &mt LCTRL N6  &mt LALT N7  &mt LSHFT N8 &mt LCTRL N9  &kp HOME   &trans     &trans  &trans  &trans  &kp ENTER
&none   &kp COMMA     &kp DOT      &kp BSPC     &kp HOME      &mo ABS    &kp C_MUTE &trans  &vb_dn  &vb_up  &kp F3   &none
                                   &none        &trans        &kp DEL    &trans     &trans  &none
            >;
        };

        ABS {
            bindings = <
        &kp LC(LS(M))   &kp LC(LS(S))   &kp LC(LS(U))   &kp LC(LS(Y))   &kp LS(COMMA)    &trans  &trans  &trans  &trans  &trans
        &kp LC(LS(A))   &kp LC(LS(L))   &kp LC(LS(B))   &kp LC(LS(K))   &kp LS(LC(D))    &trans  &trans  &trans  &trans  &trans
&none   &kp LC(LS(Z))   &kp LC(LS(I))   &kp LC(LS(G))   &kp LC(LS(V))   &kp LC(LS(H))    &trans  &trans  &trans  &trans  &trans &none
                                        &none           &trans          &trans           &trans  &trans  &none
            >;
        };
  };
};