#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <behaviors/num_word.dtsi> // requires auto-layer module (https://github.com/urob/zmk-auto-layer)
#include <dt-bindings/zmk/mouse.h>

#define DEF 0
#define NUM 1 // must be bellow SYM and NAV to access keys on those layers
#define NAV 2 // must be bellow MOU for input_processor to work
#define SYM 3
#define FUN 4
#define MOU 5 
#define AOE 6 // AOE 2 layers with easier access for default shortcuts on main layer
#define AGS 7
#define ABS 8

#define BAS 0 6 // Base layers for combos and other stuff

#include "mouse.dtsi" // Requires layer defines above

#define HYPR LG(LS(LC(LALT))) // HYPR key

// NAV key defines for macOS Shortcuts
#define P_TAB LS(LC(TAB))
#define N_TAB LC(TAB)
#define BACK  LG(LBKT)
#define FWRD  LG(RBKT)
#define UNDO  LG(Z)
#define CUT   LG(X)
#define COPY  LG(C)
#define PASTE LG(V)
#define M_CTL LC(UP)

// Customizing base behaviors

&sk {
    quick-release; // Avoids "THis" problem (double capitalization)
    release-after-ms = <86400000>; // Default is 1000 ms, raised to 1 day to emulate Callum's behavior that requires canceling on layer key.
};

&caps_word { 
    /delete-property/ ignore-modifiers; // This voids pressing command+shift+s instead of a simple command+s
    continue-list = <UNDERSCORE MINUS BACKSPACE DELETE K_CANCEL LSHFT LALT RALT SQT CARET TILDE GRAVE SLASH MINUS>; // K_CANCEL is for &lc macro, LSHFT is for PT-BR diacriticals on '^`~" keys, ALT is needed to enter alt characters
    }; 

&mt { flavor = "balanced"; };

&num_word { // requires auto-layer module (https://github.com/urob/zmk-auto-layer)
  continue-list = <
    DOLLAR DOT COMMA SQT COLON
    PLUS MINUS ASTRK SLASH EQUAL 
    LPAR RPAR LBKT RBKT LBRC RBRC LT GT 
    BSPC DEL ESC 
    LCTRL LALT LSHFT LGUI
    >;
};

/ {
     combos {
        compatible = "zmk,combos";

        // Shorthand combo synthax copied from https://github.com/kkga/zmk-config/blob/master/config/combos.dtsi
        #define COMBO(NAME, BINDINGS, KEYPOS, LAYERS, TERM) \
        combo_##NAME { \
            timeout-ms = <TERM>; \
            bindings = <BINDINGS>; \
            key-positions = <KEYPOS>; \
            layers = <LAYERS>; \
            require-prior-idle-ms = <200>; \
        };

        // Totem key positions for combos
        //       0    1    2    3    4              5    6    7    8    9
        //      10   11   12   13   14             15   16   17   18   19
        // 20   21   22   23   24   25             26   27   28   29   30   31
        //                     32   33   34   35   36   37


        // Making the keyboard more accessible for one-handed use
        COMBO(left_esc,             &kp ESCAPE,                  1  2  3, BAS,      60)
        COMBO(left_tab,             &kp TAB,                     1     3, BAS,      60)
        // hold-taps are erquired to make for the lack of tap-only combos as seen in urob's keymap 
        COMBO(left_enter,           &hrml LA(LS(LGUI)) ENTER,   11 12 13, BAS,      60)
        COMBO(left_backspace,       &hrml LA(LGUI) BSPC,        11    13, BAS,      60)
        
        COMBO(right_esc,            &kp ESCAPE,                  6  7  8, BAS NUM,  60)
        COMBO(right_tab,            &kp TAB,                     6     8, BAS NUM,  60)
        COMBO(right_enter,          &hrml RA(LS(RGUI)) ENTER,   16 17 18, BAS,      60)
        COMBO(right_backspace,      &hrml RA(RGUI) BSPC,        16    18, BAS,      60)
        // non-mod variant for NUM layer
        COMBO(right_num_enter,      &kp ENTER,                  16 17 18,     NUM,  60)
        COMBO(right_num_bspc,       &kp BSPC,                   16    18,     NUM,  60)

        // Layer toggles and other gimmickry

        COMBO(tog_nav,              &tc NAV,                    25 33,    BAS NAV,  60)
        COMBO(tog_sym,              &sl SYM,                    26 36,    BAS SYM,  60)
        COMBO(tog_mou,              &tc MOU,                    22 23 24, BAS MOU,  60)
        COMBO(tog_num,              &tc NUM,                    27 28 29, BAS NUM,  60)
        COMBO(tog_num_word,         &num_word NUM,              17 36,    BAS NUM,  60)
        COMBO(tog_caps_word,        &caps_word,                 12 17,    BAS,      60)

        // SYS combos to connect to BT devices from FUN layer
        
        COMBO(sys_connect_to_bt0,   &bt BT_SEL 0,                3  4,    FUN,      60)
        COMBO(sys_connect_to_bt1,   &bt BT_SEL 1,               13 14,    FUN,      60)
        COMBO(sys_connect_to_bt2,   &bt BT_SEL 2,               24 25,    FUN,      60)
        
        COMBO(sys_bootloader,       &bootloader,                21 22,    FUN,      60)
        COMBO(sys_clear_br_profile, &bt BT_CLR,                 29 30,    FUN,      60)

        // AOE combos for the AOE layer
        COMBO(togle_aoe_layer,      &tog AOE,                   10 11 20, DEF AOE,  60)

    };

    behaviors {
        playnp: play_next_previous_media_key {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings =
                <&mt C_MUTE C_PLAY_PAUSE>,
                <&kp C_NEXT>,
                <&kp C_PREVIOUS>;
        };
        
        vol_b_u: volume_brightness_up_on_control {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp C_VOL_UP>, <&kp C_BRI_UP>;

            mods = <(MOD_LCTL)>;
        };

        vol_b_d: volume_brightness_down_on_control {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp C_VOL_DN>, <&kp C_BRI_DN>;

            mods = <(MOD_LCTL)>;
        };

        // Swapper for Apple's CMD+TAB behavior

        swapper: swapper_for_apple_cmd_tab {
            compatible = "zmk,behavior-tri-state"; // requires tri-state module (https://github.com/urob/zmk-tri-state)
            #binding-cells = <0>;
            bindings = <&kt RGUI>, <&kp TAB>, <&kt RGUI>;

            ignored-key-positions = <7 16 17 18 9 19 30>; // Arrows and BSPC, ENTER and DEL for alt-tab movement and window/app controls
        };

        // Customized hold-tap definitions
        
        hrml: hrml { // urob's home row mods left
            compatible = "zmk,behavior-hold-tap";
            label = "HRML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31 32 33 34 35 36 37>; // right-side + thumbs
            flavor = "balanced";
            tapping-term-ms = <280>;
            hold-trigger-on-release;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <175>;
        };

        hrmr: hrmr { // urob's home row mods right
            compatible = "zmk,behavior-hold-tap";
            label = "HRMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 25 32 33 34 35 36 37>; // left-side + thumbs
            hold-trigger-on-release;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <175>;
        };

        // Customized balanced layer-tap

        ltl: layer_tap_left { // urob's logic but for a layer-tap on left hand
            compatible = "zmk,behavior-hold-tap";
            label = "LTL";
            bindings = <&lc>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31 32 33 34 35 36 37>; // right-side + thumbs
            flavor = "balanced";
            tapping-term-ms = <280>;
            hold-trigger-on-release;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <175>;
        };

        // Layer-tap to escape from MOU and NUM to DEF on tap but still preserve the ability to trigger NAV on hold for input processor to work properly
        mo_to: mouse_layer_tap_cancel {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_TO";
            bindings = <&mo>, <&to>;
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <150>;
        };
        
        #define MNAV &mo_to NAV DEF

    };

    macros {

        lc: mo_layer_switch_with_an_embeded_cancel_tap_for_clearing_any_queued_sticky_mods_on_layer_activation {
            compatible = "zmk,behavior-macro-one-param";
            label = "mo_layer/cancel";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_tap>,
                <&kp K_CANCEL &macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };

        tc: toggle_layer_switch_with_an_embeded_cancel_tap_for_clearing_any_queued_sticky_mods_on_layer_activation {
            compatible = "zmk,behavior-macro-one-param";
            label = "tog_layer/cancel";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_tap>,
                <&kp K_CANCEL &macro_param_1to1>,
                <&macro_press>,
                <&tog MACRO_PLACEHOLDER>;
        };
  
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer_for_function_and_number_row_keys {
            if-layers = <NAV SYM>;
            then-layer = <FUN>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
                
        DEF {
            bindings = <
                  &ltl MOU Q     &kp W         &kp E         &kp R        &kp T         &kp Y        &kp U         &kp I          &kp O         &kp P
                  &hrml LCTRL A  &hrml LALT S  &hrml LSHFT D &hrml LGUI F &hrml HYPR G  &hrmr HYPR H &hrmr RGUI J  &hrmr LSHFT K  &hrmr RALT L  &hrmr RCTRL SQT
&mt LA(BSPC) BSPC &hrml GLOBE Z  &ltl NUM X    &ltl NUM C    &ltl NUM V   &hrml GLOBE B &kp N        &kp M         &kp COMMA      &kp DOT       &kp SEMI        &playnp
                                               &none         &lc NAV      &kp RSHFT     &kp SPACE    &lc SYM       &none
            >;
        };
          
        NUM {
            bindings = <
        &none     &none    &none     &none    &none     &kp LA(N6) &kp N7      &kp N8  &kp N9  &mt LA(N9) LA(N0)
        &sk LCTRL &sk LALT &sk LSHFT &sk LGUI &sk HYPR  &kp MINUS  &kp N4      &kp N5  &kp N6  &kp DOT
&trans  &none     &none    &none     &none    &none     &kp PLUS   &kp N1      &kp N2  &kp N3  &kp COMMA &mt LA(BSPC) BSPC 
                           &trans    &trans   &trans    &trans     &lt SYM N0  &trans
            >;
        };

        NAV {
            bindings = <
        &kp TAB         &swapper    &kp P_TAB   &kp N_TAB   &kp FWRD    &kp PG_UP  &kp HOME  &kp UP    &kp END    &kp BSPC
        &sk LCTRL       &sk LALT    &sk LSHFT   &sk LGUI    &kp BACK    &kp PG_DN  &kp LEFT  &kp DOWN  &kp RIGHT  &kp RET
&trans  &mt GLOBE UNDO  &kp CUT     &kp COPY    &kp PASTE   &kp F18     &playnp    &kp F19   &vol_b_d  &vol_b_u   &kp DEL  &trans
                                    &trans      &trans      &kp SPACE   &trans     &trans    &trans
            >;
        };

        SYM {
            bindings = <
        &kp ESC         &kp LBRC   &kp LBKT   &kp LPAR   &kp PRCNT       &kp AMPS  &kp RPAR  &kp RBKT  &kp RBRC &kp DQT
        &kp MINUS       &kp CARET  &kp GRAVE  &kp TILDE  &kp DOLLAR      &kp HASH  &sk RGUI  &sk LSHFT &sk RALT &sk RCTRL
&kp LT  &mt GLOBE EQUAL &kp PLUS   &kp ASTRK  &kp FSLH   &kp AT          &kp PIPE  &kp BSLH  &kp QMARK &kp EXCL &kp COLON &kp GT
                              &trans     &trans     &mt RSHFT UNDER &kp UNDER &trans    &trans 
            >;
        };

        FUN {
            bindings = <
        &kp N1     &kp N2    &kp N3     &kp N4    &kp N5        &kp N6   &kp N7    &kp N8     &kp N9    &kp N0
        &sk LCTRL  &sk LALT  &sk LSHFT  &sk LGUI  &kp F11       &kp F12  &sk RGUI  &sk LSHFT  &sk RALT  &sk RCTRL
&trans  &kp F1     &kp F2    &kp F3     &kp F4    &kp F5        &kp F6   &kp F7    &kp F8     &kp F9    &kp F10   &trans
                             &trans     &trans    &kp C_POWER   &kp CAPS &trans    &trans
            >;
        };
  
        MOU {
            bindings = <
        &tog MOU        &kp M_CTL   &kp P_TAB   &kp N_TAB   &kp FWRD    &msc SCRL_DOWN   &msc SCRL_RIGHT &mmv MOVE_UP    &msc SCRL_LEFT  &kp BSPC
        &kp LCTRL       &kp LALT    &kp LSHFT   &kp LGUI    &kp BACK    &msc SCRL_UP     &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT &lt NAV ENTER
&trans  &mt GLOBE UNDO  &kp CUT     &kp COPY    &kp PASTE   &kp F11     &kp F18          &mkp MCLK       &mkp MB4        &mkp MB5        &kp DEL         &trans
                                    &trans      MNAV        &kp SPACE   &mkp LCLK        &mkp RCLK       &trans
            >;          
        };

        AOE {
            bindings = <
        &kp Q        &kp W      &kp E       &kp R        &kp T        &trans  &trans  &trans  &trans  &trans
        &mt LCTRL A  &mt LALT S &mt LSHFT D &mt LCTRL F  &kp G        &trans  &trans  &trans  &trans  &trans
&none   &kp Z        &kp X      &kp C       &kp V        &kp B        &trans  &trans  &trans  &trans  &trans  &none
                                &none       &lt AGS H    &lt ABS DOT  &trans  &trans  &none
            >;
        };

        AGS {
            bindings = <
        &kp N1        &kp N2       &kp N3       &kp N4        &kp DEL    &trans  &trans  &trans   &trans   &kp BSPC
        &mt LCTRL N6  &mt LALT N7  &mt LSHFT N8 &mt LCTRL N9  &kp HOME   &trans  &trans  &trans   &trans   &kp ENTER
&none   &kp COMMA     &kp DOT      &kp BSPC     &kp HOME      &mo ABS    &trans  &trans  &vol_b_d &vol_b_u &kp F3   &none
                                   &none        &trans        &kp DEL  &trans  &trans  &none
            >;
        };

        ABS {
            bindings = <
        &kp LC(LS(M))   &kp LC(LS(S))   &kp LC(LS(U))   &kp LC(LS(Y))   &kp LS(COMMA)    &trans  &trans  &trans  &trans  &trans
        &kp LC(LS(A))   &kp LC(LS(L))   &kp LC(LS(B))   &kp LC(LS(K))   &kp LS(LC(D))    &trans  &trans  &trans  &trans  &trans
&none   &kp LC(LS(Z))   &kp LC(LS(I))   &kp LC(LS(G))   &kp LC(LS(V))   &kp LC(LS(H))    &trans  &trans  &trans  &trans  &trans &none
                                        &none           &kp LC(LS(H))   &trans           &trans  &trans  &none
            >;
        };
  };
};